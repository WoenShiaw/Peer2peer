import socket
import threading
import os

# Peer Configuration
HOST = "127.0.0.1"  # Localhost for testing
PORT = 5000
BUFFER_SIZE = 4096
SEPARATOR = "<SEPARATOR>"

def handle_client(client_socket):
    """Handles receiving and storing files from peers."""
    try:
        received = client_socket.recv(BUFFER_SIZE).decode()
        if not received:
            print("[!] No data received.")
            client_socket.close()
            return
        
        filename, filesize = received.split(SEPARATOR)
        filename = os.path.basename(filename)
        filesize = int(filesize)
        
        with open(filename, "wb") as f:
            while True:
                bytes_read = client_socket.recv(BUFFER_SIZE)
                if not bytes_read:
                    break
                f.write(bytes_read)
        
        print(f"[+] File {filename} received successfully.")
    except Exception as e:
        print(f"[!] Error: {e}")
    finally:
        client_socket.close()

def server():
    """Starts a peer server to accept file-sharing requests."""
    try:
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.bind((HOST, PORT))
        server_socket.listen(5)
        print(f"[*] Listening on {HOST}:{PORT}")
        
        while True:
            client_socket, addr = server_socket.accept()
            print(f"[+] Connection from {addr}")
            thread = threading.Thread(target=handle_client, args=(client_socket,))
            thread.start()
    except Exception as e:
        print(f"[!] Server error: {e}")
    finally:
        server_socket.close()

def client(target_host, target_port, filename):
    """Sends a file to a peer."""
    try:
        if not os.path.exists(filename):
            print(f"[!] File '{filename}' not found.")
            return
        
        filesize = os.path.getsize(filename)
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect((target_host, target_port))
        client_socket.send(f"{filename}{SEPARATOR}{filesize}".encode())
        
        with open(filename, "rb") as f:
            while True:
                bytes_read = f.read(BUFFER_SIZE)
                if not bytes_read:
                    break
                client_socket.sendall(bytes_read)
        
        print(f"[+] File {filename} sent successfully.")
    except Exception as e:
        print(f"[!] Client error: {e}")
    finally:
        client_socket.close()

if __name__ == "__main__":
    choice = input("Start as (server/client)? ").strip().lower()
    if choice == "server":
        server()
    elif choice == "client":
        target_host = input("Enter target IP: ").strip()
        target_port = int(input("Enter target port: ").strip())
        filename = input("Enter filename to send: ").strip()
        client(target_host, target_port, filename)
    else:
        print("[!] Invalid choice. Exiting.")
